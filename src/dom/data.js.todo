define(['util/camelcase'], function(camelcase)
{
	var strUndef = 'undefined';

	var data = {};
	var exp = 'hydro' + (+new Date());
	var emptyArray = [];
	var uid = 0;

	/**
	 * Get value from node:
	 *  1. first try key as given,
	 *  2. then try camelized key,
	 *  3. fall back to reading "data-*" attribute.
	 *
	 * @param node
	 * @param name
	 * @returns {*}
	 */
	function getData(node, name)
	{
		var id = node[exp];
		var store = id && data[id];

		if(typeof name === strUndef)
			return (store || setData(node));

		if(store)
		{
			if(name in store)
				return store[name];

			var camelName = camelcase(name);
			if(camelName in store)
				return store[camelName]
		}

		return null;
	}

	/**
	 * Store value under camelized key on node
	 *
	 * @param node
	 * @param name
	 * @param value
	 * @returns {*}
	 */
	function setData(node, name, value)
	{
		var id = node[exp] || (node[exp] = ++uid);
		var store = data[id] || (data[id] = attributeData(node));

		if(typeof name !== strUndef)
			store[camelcase(name)] = value;
		
		return store
	}

	// Read all "data-*" attributes from a node
	function attributeData(node) {
		var store = {}
		$.each(node.attributes || emptyArray, function(i, attr){
			if (attr.name.indexOf('data-') == 0)
				store[camelcase(attr.name.replace('data-', ''))] =
					$.zepto.deserializeValue(attr.value)
		})
		return store
	}

	$.fn.data = function(name, value) {
		return value === undefined ?
			// set multiple values via object
			$.isPlainObject(name) ?
				this.each(function(i, node){
					$.each(name, function(key, value){ setData(node, key, value) })
				}) :
				// get value from first element
				(0 in this ? getData(this[0], name) : undefined) :
			// set value on all elements
			this.each(function(){ setData(this, name, value) })
	}

	$.fn.removeData = function(names) {
		if (typeof names == 'string') names = names.split(/\s+/)
		return this.each(function(){
			var id = this[exp], store = id && data[id]
			if (store) $.each(names || store, function(key){
				delete store[names ? camelcase(this) : key]
			})
		})
	}

		// Generate extended `remove` and `empty` functions
	;['remove', 'empty'].forEach(function(methodName){
		var origFn = $.fn[methodName]
		$.fn[methodName] = function() {
			var elements = this.find('*')
			if (methodName === 'remove') elements = elements.add(this)
			elements.removeData()
			return origFn.call(this)
		}
	})
});